name: Build AniWRT

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      resources:
        description: "Select resources (e.g., openwrt:23.05.4, immortalwrt:23.05.3)"
        required: true
        default: "openwrt:23.05.4"
      rootfs_partsize:
        description: "Specify ROOTFS_PARTSIZE in MB"
        required: true
        default: "256"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget

      - name: Parse resources
        id: parse_resources
        run: |
          resources="${{ github.event.inputs.resources }}"
          export DISTRO="${resources%%:*}"
          export VERSION="${resources##*:}"
          echo "DISTRO=${DISTRO}" >> $GITHUB_ENV
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Download ImageBuilder
        run: |
          IMAGEBUILDER_URL="https://downloads.${DISTRO}.org/releases/${VERSION}/targets/armsr/armv8/${DISTRO}-imagebuilder-${VERSION}-armsr-armv8.Linux-x86_64.tar.xz"
          wget ${IMAGEBUILDER_URL} -O imagebuilder.tar.xz
          tar -xf imagebuilder.tar.xz

      - name: Build image
        run: |
          cd ${DISTRO}-imagebuilder-${VERSION}-armsr-armv8.Linux-x86_64
          make image PROFILE="generic" BIN_DIR=output \
            EXTRA_IMAGE_NAME="custom" \
            ROOTFS_PARTSIZE=${{ github.event.inputs.rootfs_partsize }}

      - name: Upload image to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.repository.releases_url }}/assets?name=generic-ext4-combined-${{ env.DISTRO }}-${{ env.VERSION }}.img
          asset_path: ${DISTRO}-imagebuilder-${VERSION}-armsr-armv8.Linux-x86_64/output/generic-ext4-combined-custom.img
          asset_name: generic-ext4-combined-${{ env.DISTRO }}-${{ env.VERSION }}.img
          asset_content_type: application/octet-stream
