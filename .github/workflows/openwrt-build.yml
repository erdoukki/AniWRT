name: Build AniWRT

on:
  workflow_dispatch:
    inputs:
      resources:
        description: 'Select Resources (openwrt or immortalwrt)'
        required: true
        default: 'openwrt'
        type: choice
        options:
          - openwrt
          - immortalwrt
      version:
        description: 'Select Version'
        required: true
        default: '23.05.4'
        type: string
      rootfs_partsize:
        description: 'ROOTFS_PARTSIZE in MB'
        required: false
        default: '256'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up environment
      run: |
        RESOURCE_URL=""
        if [[ "${{ github.event.inputs.resources }}" == "openwrt" ]]; then
          RESOURCE_URL="https://downloads.openwrt.org/releases/${{ github.event.inputs.version }}/targets/armsr/armv8/openwrt-imagebuilder-${{ github.event.inputs.version }}-armsr-armv8.Linux-x86_64.tar.xz"
        elif [[ "${{ github.event.inputs.resources }}" == "immortalwrt" ]]; then
          RESOURCE_URL="https://downloads.immortalwrt.org/releases/${{ github.event.inputs.version }}/targets/armsr/armv8/immortalwrt-imagebuilder-${{ github.event.inputs.version }}-armsr-armv8.Linux-x86_64.tar.xz"
        fi
        echo "RESOURCE_URL=${RESOURCE_URL}" >> $GITHUB_ENV

    - name: Download Image Builder
      run: |
        curl -L ${{ env.RESOURCE_URL }} -o imagebuilder.tar.xz
        tar -xJf imagebuilder.tar.xz

    - name: Build the image
      run: |
        cd openwrt-imagebuilder-*/  # atau immortalwrt-imagebuilder-*
        make image PROFILE=generic \
          ROOTFS_PARTSIZE=${{ github.event.inputs.rootfs_partsize }}M

    - name: Archive output
      run: |
        mkdir -p output
        cp bin/targets/armsr/armv8/generic-ext4-combined.img.gz output/

    - name: Upload Release Asset
      uses: actions/upload-artifact@v3
      with:
        name: generic-ext4-combined.img.gz
        path: output/generic-ext4-combined.img.gz

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.resources }}-${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.resources }} ${{ github.event.inputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/generic-ext4-combined.img.gz
        asset_name: generic-ext4-combined.img.gz
        asset_content_type: application/gzip
